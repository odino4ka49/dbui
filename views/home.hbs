
<script src="/bower_components/bootstrap-treeview/src/js/bootstrap-treeview.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/momentjs/latest/moment.min.js"></script>
<script type="text/javascript" src="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.min.js"></script>
<script src="/static/js/chart.js"></script>
<script src="/static/js/tree.js"></script>
<script src="/static/js/timepicker.js"></script>
<script src="https://cdn.plot.ly/plotly-latest.min.js"></script>
<script src='https://cdnjs.cloudflare.com/ajax/libs/dragula/3.7.2/dragula.min.js'></script>
<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/daterangepicker/daterangepicker.css" />
<link href="/static/css/dbtree.css" rel="stylesheet">
<link href="/static/css/dragula.css" rel="stylesheet">
<link href="/bower_components/bootstrap/dist/css/bootstrap.css" rel="stylesheet">

<input id="datetimerange" type="text" name="datetimes" />


<div id="dbtree">
<ul id="databases"></ul>
</div>

<div id="graphset" class="graphset">
    <div id="graph1" class="resizable active">
        <div id="chart_1" class="pchart"></div>
        <div class="close_chart"></div>
        <div class="handle"></div>
    </div>
    <div id="add_chart"></div>
</div>
<div id="mirror"></div>

<br/>

<script>
    'use strict';
    window.WebSocket = window.WebSocket || window.MozWebSocket;

    var connection = new WebSocket('ws://192.168.163.195:1337');//'ws://192.168.144.71:1337');

    connection.onopen = function () {
        console.log("connection is opened")
        // connection is opened and ready to use
    };

    connection.onclose = function () {
        console.log("connection is closed")
        // an error occurred when sending/receiving data
    };

    connection.onerror = function (error) {
        console.log("connection error")
        // an error occurred when sending/receiving data
    };

    connection.onmessage = function (message) {
        document.body.style.cursor='default';
        try {
            var json = JSON.parse(message.data);
            console.log("got message "+json.title)
            switch (json.title) {
                case "channel_data":
                    addGraphData(json);
                    break;
                case "orbit_data":
                    addOrbitData(json);
                    break;
                case "databases":
                    displayDatabases(json.data);
                    break;
                case "tree_data":
                    refreshTree(json.database,json.data);
                    break;
                case "error":
                    alertError(json.data);
                    break;
            }
            json = null;
        } catch (e) {
            console.log(e);
            return;
        }
    };

    function sendMessageToServer(message){
        connection.send(message);
    }

    initPicker();

</script>
